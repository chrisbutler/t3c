{"version":3,"sources":["chrisbutler:accounts-pivotal/accounts-pivotal.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sB;AACA,gE;AACA,2B;AACA,gC;AACA,2B;AACA,qB;AACA,6B;AACA,4B;AACA,W;AACA,gD;AACA,sB;AACA,wC;AACA,kB;AACA,mC;AACA,W;AACA,S;AACA,S;AACA,K;AACA,I;AACA,C;;AAEA,sB;AACA,iC;AACA,0C;AACA,gD;AACA,K;;AAEA,wC;;AAEA,iD;AACA,qB;AACA,wB;AACA,K;;AAEA,+D;AACA,oB;AACA,2B;AACA,+B;AACA,wB;AACA,O;;AAEA,4E;AACA,kC;AACA,yI;AACA,oB;AACA,+C;AACA,gB;AACA,8B;AACA,qE;AACA,+B;AACA,mC;AACA,6B;AACA,uB;AACA,gC;AACA,c;AACA,wB;AACA,wB;AACA,4B;AACA,e;AACA,c;AACA,oG;AACA,mD;AACA,kB;AACA,uD;AACA,W;AACA,S;AACA,S;AACA,6B;AACA,Y;AACA,uB;AACA,K;AACA,K;AACA,C","file":"/packages/chrisbutler_accounts-pivotal.js","sourcesContent":["if (Meteor.isClient) {\n  Meteor.loginWithPivotal = function(user, password, callback) {\n    if (user && password) {\n      Accounts.callLoginMethod({\n        methodArguments: [{\n          user: user,\n          password: password,\n          service: 'pivotal'\n        }],\n        userCallback: function (error, result) {\n          if (error) {\n            callback && callback(error);\n          } else {\n            callback && callback();\n          }\n        }\n      });\n    }\n  };\n}\n\nif (Meteor.isServer) {\n  Accounts.addAutopublishFields({\n    forLoggedInUser: ['services.pivotal'],\n    forOtherUsers: ['services.pivotal.username']\n  });\n\n  Future = Npm.require('fibers/future');\n\n  var NonEmptyString = Match.Where(function (x) {\n    check(x, String);\n    return x.length > 0;\n  });\n\n  Accounts.registerLoginHandler(\"pivotal\", function (options) {\n    check(options, {\n      user: NonEmptyString,\n      password: NonEmptyString,\n      service: 'pivotal'\n    });\n\n    if (options.service === 'pivotal' && options.user && options.password) {\n      var response = new Future();\n      HTTP.get(\"https://www.pivotaltracker.com/services/v5/me\", {auth: options.user + ':' + options.password}, function (error, result) {\n        if (error) {\n          response.return(error.response.data);\n        } else {\n          var d = result.data;\n          if (_.indexOf([d.username, d.email], options.user) != -1) {\n            var serviceData = {\n              username: d.username,\n              email: d.email,\n              id: d.id,\n              token: d.api_token\n            };\n            var opts = {\n              profile: {\n                name: d.name\n              }\n            };\n            var user = Accounts.updateOrCreateUserFromExternalService('pivotal', serviceData, opts);\n            response.return({userId: user.userId});\n          } else {\n            response.return({error: 'Invalid Login.'});\n          }\n        }\n      });\n      return response.wait();\n    } else {\n      return undefined;\n    }\n  });\n}\n"]}